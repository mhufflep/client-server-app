//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ObserverClient.ObserverService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ObserverService.IObserverService")]
    public interface IObserverService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/TestConnection", ReplyAction="http://tempuri.org/IObserverService/TestConnectionResponse")]
        string TestConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/TestConnection", ReplyAction="http://tempuri.org/IObserverService/TestConnectionResponse")]
        System.Threading.Tasks.Task<string> TestConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/GetTrackOption", ReplyAction="http://tempuri.org/IObserverService/GetTrackOptionResponse")]
        bool GetTrackOption();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/GetTrackOption", ReplyAction="http://tempuri.org/IObserverService/GetTrackOptionResponse")]
        System.Threading.Tasks.Task<bool> GetTrackOptionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/ChangeTrackOption", ReplyAction="http://tempuri.org/IObserverService/ChangeTrackOptionResponse")]
        bool ChangeTrackOption();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/ChangeTrackOption", ReplyAction="http://tempuri.org/IObserverService/ChangeTrackOptionResponse")]
        System.Threading.Tasks.Task<bool> ChangeTrackOptionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/GetEventLogsCount", ReplyAction="http://tempuri.org/IObserverService/GetEventLogsCountResponse")]
        int GetEventLogsCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/GetEventLogsCount", ReplyAction="http://tempuri.org/IObserverService/GetEventLogsCountResponse")]
        System.Threading.Tasks.Task<int> GetEventLogsCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/AddEvent", ReplyAction="http://tempuri.org/IObserverService/AddEventResponse")]
        void AddEvent(string log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/AddEvent", ReplyAction="http://tempuri.org/IObserverService/AddEventResponse")]
        System.Threading.Tasks.Task AddEventAsync(string log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/ConnectToDataBase", ReplyAction="http://tempuri.org/IObserverService/ConnectToDataBaseResponse")]
        void ConnectToDataBase();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/ConnectToDataBase", ReplyAction="http://tempuri.org/IObserverService/ConnectToDataBaseResponse")]
        System.Threading.Tasks.Task ConnectToDataBaseAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/SendNotification", ReplyAction="http://tempuri.org/IObserverService/SendNotificationResponse")]
        int SendNotification();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/SendNotification", ReplyAction="http://tempuri.org/IObserverService/SendNotificationResponse")]
        System.Threading.Tasks.Task<int> SendNotificationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/Authenticate", ReplyAction="http://tempuri.org/IObserverService/AuthenticateResponse")]
        int Authenticate(string login, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/Authenticate", ReplyAction="http://tempuri.org/IObserverService/AuthenticateResponse")]
        System.Threading.Tasks.Task<int> AuthenticateAsync(string login, string hash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/GetLogTable", ReplyAction="http://tempuri.org/IObserverService/GetLogTableResponse")]
        string[] GetLogTable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/GetLogTable", ReplyAction="http://tempuri.org/IObserverService/GetLogTableResponse")]
        System.Threading.Tasks.Task<string[]> GetLogTableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/GetTypes", ReplyAction="http://tempuri.org/IObserverService/GetTypesResponse")]
        string[] GetTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/GetTypes", ReplyAction="http://tempuri.org/IObserverService/GetTypesResponse")]
        System.Threading.Tasks.Task<string[]> GetTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/GetTypeById", ReplyAction="http://tempuri.org/IObserverService/GetTypeByIdResponse")]
        string GetTypeById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/GetTypeById", ReplyAction="http://tempuri.org/IObserverService/GetTypeByIdResponse")]
        System.Threading.Tasks.Task<string> GetTypeByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/GetLoginById", ReplyAction="http://tempuri.org/IObserverService/GetLoginByIdResponse")]
        string GetLoginById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IObserverService/GetLoginById", ReplyAction="http://tempuri.org/IObserverService/GetLoginByIdResponse")]
        System.Threading.Tasks.Task<string> GetLoginByIdAsync(int Id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IObserverServiceChannel : ObserverClient.ObserverService.IObserverService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ObserverServiceClient : System.ServiceModel.ClientBase<ObserverClient.ObserverService.IObserverService>, ObserverClient.ObserverService.IObserverService {
        
        public ObserverServiceClient() {
        }
        
        public ObserverServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ObserverServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ObserverServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ObserverServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string TestConnection() {
            return base.Channel.TestConnection();
        }
        
        public System.Threading.Tasks.Task<string> TestConnectionAsync() {
            return base.Channel.TestConnectionAsync();
        }
        
        public bool GetTrackOption() {
            return base.Channel.GetTrackOption();
        }
        
        public System.Threading.Tasks.Task<bool> GetTrackOptionAsync() {
            return base.Channel.GetTrackOptionAsync();
        }
        
        public bool ChangeTrackOption() {
            return base.Channel.ChangeTrackOption();
        }
        
        public System.Threading.Tasks.Task<bool> ChangeTrackOptionAsync() {
            return base.Channel.ChangeTrackOptionAsync();
        }
        
        public int GetEventLogsCount() {
            return base.Channel.GetEventLogsCount();
        }
        
        public System.Threading.Tasks.Task<int> GetEventLogsCountAsync() {
            return base.Channel.GetEventLogsCountAsync();
        }
        
        public void AddEvent(string log) {
            base.Channel.AddEvent(log);
        }
        
        public System.Threading.Tasks.Task AddEventAsync(string log) {
            return base.Channel.AddEventAsync(log);
        }
        
        public void ConnectToDataBase() {
            base.Channel.ConnectToDataBase();
        }
        
        public System.Threading.Tasks.Task ConnectToDataBaseAsync() {
            return base.Channel.ConnectToDataBaseAsync();
        }
        
        public int SendNotification() {
            return base.Channel.SendNotification();
        }
        
        public System.Threading.Tasks.Task<int> SendNotificationAsync() {
            return base.Channel.SendNotificationAsync();
        }
        
        public int Authenticate(string login, string hash) {
            return base.Channel.Authenticate(login, hash);
        }
        
        public System.Threading.Tasks.Task<int> AuthenticateAsync(string login, string hash) {
            return base.Channel.AuthenticateAsync(login, hash);
        }
        
        public string[] GetLogTable() {
            return base.Channel.GetLogTable();
        }
        
        public System.Threading.Tasks.Task<string[]> GetLogTableAsync() {
            return base.Channel.GetLogTableAsync();
        }
        
        public string[] GetTypes() {
            return base.Channel.GetTypes();
        }
        
        public System.Threading.Tasks.Task<string[]> GetTypesAsync() {
            return base.Channel.GetTypesAsync();
        }
        
        public string GetTypeById(int Id) {
            return base.Channel.GetTypeById(Id);
        }
        
        public System.Threading.Tasks.Task<string> GetTypeByIdAsync(int Id) {
            return base.Channel.GetTypeByIdAsync(Id);
        }
        
        public string GetLoginById(int Id) {
            return base.Channel.GetLoginById(Id);
        }
        
        public System.Threading.Tasks.Task<string> GetLoginByIdAsync(int Id) {
            return base.Channel.GetLoginByIdAsync(Id);
        }
    }
}
